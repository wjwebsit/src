package main

import "fmt"

/**
值类型：struct、int、float、bool和string这些类型都属于值类型，
使用这些类型的变量直接指向存在内存中的值，
值类型的变量的值存储在栈中。
当使用等号=将一个变量的值赋给另一个变量时，如 j = i ,实际上是在内存中将 i 的值进行了拷贝。
可以通过 &i 获取变量 i 的内存地址。浅拷贝

-----就是修改j之后 i不跟着改变
---------------------
引用类型：特指slice、map、channel这三种预定义类型。
引用类型拥有更复杂的存储结构:(1)分配内存 (2)初始化一系列属性等一个引用类型的变量r1存储的是r1的值所在的内存地址（数字），
或内存地址中第一个字所在的位置，这个内存地址被称之为指针，
这个指针实际上也被存在另外的某一个字中
------就是深拷贝 a = b a修改 b也跟着修改

 */

 func main() {
 	//数组为值类型 即时b修改了其中元素 a也不会修改
	 a :=[5]int{1,2,3,4,5}
	 b := a
	 b[2] = 8
	 fmt.Println(a, b)

	 //切片为深拷贝 b2修改了a2也修改 ---无论谁改变2者都会改变
	 a2 :=[]int{1,2,3,4,5}
	 b2 := a2
	 b2[2] = 8
	 fmt.Println(a2, b2)

	 //测试切片为深拷贝 a3修改了b3也修改
	 a3 := []int{1,2,3}
	 b3 := a3
	 a3[0] = -1

	 fmt.Println(a3,b3)

	 b4 := a3[0:] //为什么切片的截取也是深拷贝？？
	 b4[0] = 1
	 fmt.Println(b4,a3)

 }