package main

import "fmt"

/**
	算法描述
给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。

示例 1:

输入: "(()"
输出: 2
解释: 最长有效括号子串为 "()"
示例 2:

输入: ")()())"
输出: 4
解释: 最长有效括号子串为 "()()"
就是求括号串的最少添加数，那就是总字符串长度减去最大匹配数就可以了！
 */
/**
	利用栈实现
 */
func longestValidParentheses(s string) int {
	//判断长度
	if len(s) == 0 || len(s) == 1 {
		return 0
	}

	//定义栈来保存（索引
	/*var stack []int

	//(索引
	start := 0

	//遍历
	for i := 0; i < len(s); i ++ {
		//判断是否为(
		if s[i] == '(' {
			//记录索引
			stack = append(stack,i)

		} else {
			//判断是否为空栈
			if len(stack) == 0 {
				start = i + 1
				continue
			}

			//出栈
			stack = stack[:len(stack) -1]

			//判断是否为空
			if len(stack) == 0 {
				max = maxInt(max,i - start + 1)
			} else {
				max = maxInt(max,i - stack[len(stack) - 1])
			}

		}

	}*/
	//采用区间dp ,dp[i][j] 表示s[i:j] 匹配的括号的数目
	var dp = make([][]int,len(s))

	//初始化
	for i := 0 ; i < len(s); i ++ {
		dp[i] = make([]int,len(s))
		dp[i][i] = 0 //一个元素可定为0
		if s[i] == '(' && i + 1 < len(s) && s[i + 1] == ')' {
			dp[i][i + 1] = 2
		}
	}

	//区间长度
	for l := 4; l <= len(s) ; l ++ {
		//区间起始
		for i := 0 ; i < len(s) - l + 1; i ++ {
			//区间终止下标
			j := i + l - 1

			//分两种情况
			if s[i] == '(' && s[j] == ')' && dp[i + 1][j - 1] > 0 {
				dp[i][j] = dp[i + 1][j - 1] + 2
			} else {
				//判断括号
				dp[i][j] = 0
				for k := i + 1; k <= j - 1; k ++ {
					if dp[i][k] > 0 && dp[k + 1][j] > 0 {
						dp[i][j] = l
						break
					}
				}
			}

		}

	}

	//返回最大
	max := 0
	for i := 0 ; i < len(dp); i ++ {
		for j := 0; j < len(dp); j ++ {
			max = maxInt(dp[i][j],max)
		}
	}

	return max

}

func maxInt(a,b int) int {
	if a > b {
		return  a
	} else {
		return b
	}
}

//测试
func main() {
	str := "(()(()()()(()())()(()()))()()())()(((()())((())(()()((()((((())(())()()(())()(()(()(())))))))(()()()))()()))))))(()())))((())())))()(((()(()))())((())))(())(((()()))))())))((()((()()(()))())(()))(())((())()(((()(((()))))()))()()())()()()(()(()(()()()(()(())(())))())()))())(())((())(()((((())((())((())(()()(((()))(()(((())())()(())))(()))))))(()(()(()))())(()()(()(((()()))()(())))(()()(())))))(()(()()())))()()())))))((())(()()(((()(()()))(())))(((()))())())())(((()((()((()())((()))(()()((()(())())(()))()())())))))()(()())))()()))(((()(()))((()((((())((())))((())()()))())()(((()()(((()))))))(((()))()(()(((())(())()()()))))()))()))))()(()))()()()))))()(()))()()(()())))(()))()())(())()())(())()()))(()())))((()())))())))))((()))())()()))))()))(((())(())()))()()((()))(((()))))((()((()))(())(((()))()()()())())())))(()(((())()())(())(((()()((())()))(()()(((())))((()(((()))(((((()(((())())))(())(()()((()(()(())())(((((())((()()))())(()())))()()()(()(((((((())))(()()()()((()(((())())())())))())())())))()((((())(((()()()())()))()()(()(()()))()))(())(()())))))()())()())))()()(())))))))((())()()(((()))()))())))))((()())((()())(((())()())()))(()(()()(((()(())()))()())()()(())()(()))))()))()()))))(())(()()(())((()))(()))((())))))(())))()))(()()(())))())()((())()))((()()(()())()()(()))())(((())()(((()((())()(()()()((()(()())(()())())((((())))())())))(()))(((())((()))))((()()(((())((())()()()))((()())()()())())))))((((()((()())))(())(())()()()(((((())())()()()(())())()((()(()())(((())((((()((()(((()))(()()))())()()(()(()(())))()))())))(()()(()))))))(()()())()()))()(())()("

	fmt.Println(longestValidParentheses(str))

}
