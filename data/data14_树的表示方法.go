package main
/**
	树（tree）：树不可能存在2个根节点，子树个数没有限制但是不相交的（即不存在1个孩子节点同事存在2个双亲节点）
	树是一个结合也可以理解为结点的数组
	树的存储结构：双亲表示法（顺序存储方式）、孩子表示法（链式）、孩子兄弟表示法（二叉树）（链式）
 */
 /**
 	根节点：无双亲唯一
 	中间结点：1个双亲多个孩子
 	叶节点：没有孩子
  */

 /**
 	双亲表示法（顺序存储）：在每个结点中，附设一个指示器来告知当前的孩子结点的双亲树集合的位置
 	缺点：查询某个树结点的孩子结点需要遍历
 	其数据结构如下:
  */

  /**
  	孩子结点结构体
   */
  type pNode struct {
  	 data int //每个结点的值域
  	 parent int //双亲的索引
  }
  /**
  	定义树的结构体
   */
  type pTree struct {
  	nodes  [10000]pNode //结点的集合---树无非就是各个结点的集合
  	r,n int //root结点的下标以及树中结点的数目
  }

  /**
  	孩子表示法（链式存储）：把每个结点的孩子结点排列起来并以单链表的形式作存储即n个结点有n个孩子单链表
  	如果是叶子结点则此单链表为空然后n个头指针又组合成一个线性表采用顺序存储的方式存放到一个一维数组中
  	结构体如下:
  	缺点：孩子寻找双亲结点困难
   */
   //定义孩子结点
   type cNode struct { //定义孩子结点为单链表
   		child int //孩子的数组下标
   		next *cNode
   }

   //定义表头结构
   type cBox struct { //每一个结点都有一个表头
   		firstChild cNode
   		data int //值域
   }

   //定义树结构
   type  cTree struct {
   		data [10000]cBox //----cBox[0]一般为根
   		r,n int //根结点位置和节点数组
   }

   /**
   		孩子兄弟表示法----二叉树
    */

func main () {

}


